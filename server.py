#!/usr/bin/python3

import socket
import paramiko
import threading
import sys

from sshConfig import *

#script args
serverAddress = host
serverPort = port
serverUsername = user
serverPassword = password

#serverHostKey = paramiko.RSAKey(filename = privateKey)
serverHostKey = paramiko.RSAKey(filename = "./keys/rsaKeys")
serverSocket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
serverSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

#ssh server parameters defined in the class
class Server(paramiko.ServerInterface):
    def __init__(self):
        self.event = threading.Event()
    
    def checkAuthPassword(self, username, password):
    
        if username == serverUsername and password == serverPassword:
            return paramiko.AUTH_SUCCESSFUL
    
        return paramiko.AUTH_FAILED
    
    def checkChannelRequest(self, kind, chanid):
       
        if kind == "session":
            return paramiko.OPEN_SUCCEEDED
       
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

#ssh client handler
def clientHandler(clientSocket):
    try:
        #bind client socket to ssh server session and add rsa key
        sshSession = paramiko.Transport(clientSocket)
        sshSession.add_server_key(serverHostKey)
        server = Server()

#start the ssh server and negotiate ssh params
        try:
            sshSession.start_server(server=server)
        except SSHException as err:
            print("[!] SSH Parameters Negotiation Failed")

        print("[*] SSH Parameters Negotiation Succeeded")

    #authenticate the client
        print("[*] Authenticating")
        sshChannel = sshSession.accept(20)
        if sshChannel == None or not sshChannel.active:
            print("[*] SSH Client Authentication Failure")
            sshSession.close()
        else:
            print("[*] SSH Client Authenticated")
    #ssh channel is established. We can start the shell
            #and send commands from input
            while not sshChannel.closed:
                try:
                    command = input("<shell:#> ").rstrip()
                    if len(command):
                        if command != "exit":
                            sshChannel.send(command)
                            print(sshChannel.recv(1024).decode('utf-8') + '\n')
                        else:
                            print("[*] Exiting")
                            try:
                                sshSession.close()
                            except:
                                print("[!] Error closing SSH session")
                            print("[*] SSH session closed")
                except Exception as e:
                    print(e)

    except Exception as err:
        print("[*] Caught Exception: ", str(err))
        print("[*] Exiting Script")                
    try:
        sshSession.close()
    except:
        print("[!] Error closing SSH session")
    print("[*] SSH session closed")

    sys.exit(1)

#ssh server bind and listen
try:
    serverSocket.bind((serverAddress, serverPort))
except:
    print(f"[!] Bind Error for SSH Server using {serverAddress}:{serverSocket.getsockname()[1]}")
    sys.exit(1)
print(f"[*] Bind Success for SSH Server using {serverAddress}:{serverSocket.getsockname()[1]}")

serverSocket.listen(100)
print("[*] Listening")
#Keep ssh server active and accept incoming tcp connections
while True:
    clientSocket, addr = serverSocket.accept()
    print(f"[*] Incoming TCP Connection from {addr[0]}:{addr[1]}")
    clientHandler(clientSocket)