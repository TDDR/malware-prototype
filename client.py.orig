#!/usr/bin/env python3

import argparse
import random
import signal
import errno
import json
import os
from socket import *


def printTicket(ticket):

    with open("LotteryTickets.json", "a") as writeToFile:
        json.dump(ticket, writeToFile)
<<<<<<< HEAD
        
    print(ticket["typeOfTicket"], "\n")
    print(*ticket["numbers"], sep = "\n\n" )
    print("\n")
=======

    print("Id:", "".join(ticket["id"]))
    print(ticket["typeOfTicket"], "\n")

    if ticket["typeOfTicket"] == "Lotto Max":
        for i in ticket["numbers"]:
            print(*i, sep="\n")
            print("\n")
    else:
        print(*ticket["numbers"], sep="\n\n")
        print("\n")
>>>>>>> 4af6b18bbed32e52f6aeb344a44f34f8eb18a651


def sendRequest(clientSocket):
<<<<<<< HEAD
    
    typeOfTicket = 2     
    numberOfTickets = 1  
    
    dataToSend = dict(typeOfTicket = typeOfTicket, numberOfTickets = numberOfTickets)
=======

    ticketPool = [1, 2, 3]
    numberPool = [i for i in range(1, 11)]
    idPool = [chr(i) for i in range(ord("0"), ord("z") + 1)]

    typeOfTicket = 2  # random.choice(ticketPool)
    numberOfTickets = 1  # random.choice(numberPool)
    identifier = random.sample(idPool, 6)

    dataToSend = dict(
        typeOfTicket=typeOfTicket,
        numberOfTickets=numberOfTickets,
        identifier=identifier)
>>>>>>> 4af6b18bbed32e52f6aeb344a44f34f8eb18a651
    clientSocket.sendall(str(dataToSend).encode())


def zombieSlayer(signalNumber, frame):

    while True:
        try:
            pid, status = os.waitpid(-1, os.WNOHANG)

        except OSError:
            return

    if pid == 0:
        return


def main(maxConnections, maxClients):

    ip = "localhost"
    port = 8080
    sockets = []

    for clientNumber in range(maxClients):
        try:
            pid = os.fork()
        except OSError:
            sys.stderr.write("Could not fork() a child")
            continue

        if pid == 0:
            for connectionNumber in range(maxConnections):

                clientSocket = socket(AF_INET6, SOCK_STREAM)
                clientSocket.connect((ip, port))
                sendRequest(clientSocket)
                sockets.append(clientSocket)

                dataRecived = eval(clientSocket.recv(1000).decode())

<<<<<<< HEAD
                print(f"Here is your prediction for this weeks numbers")
=======
                print(
                    f"Client# {clientNumber + 1 } : Connection# {connectionNumber + 1}")
>>>>>>> 4af6b18bbed32e52f6aeb344a44f34f8eb18a651
                printTicket(dataRecived)

            os._exit(0)

    signal.signal(signal.SIGCHLD, zombieSlayer)

<<<<<<< HEAD
    argParser.add_argument("-c", "--maxConections", type=int, 
                            nargs = "?", default = 1, const = 1,
                            help="Maximum amount of connections (defualt 2).", dest = "maxConnections")

    argParser.add_argument("-n", "--maxClients", type=int,
                            nargs = "?", default = 1, const = 1,
                            help="Maximum amount of clients (default 2).", dest = "maxClients")
=======

if __name__ == '__main__':

    argParser = argparse.ArgumentParser()

    argParser.add_argument(
        "-c",
        "--maxConections",
        type=int,
        nargs="?",
        default=2,
        const=2,
        help="Maximum amount of connections (defualt 2).",
        dest="maxConnections")

    argParser.add_argument(
        "-n",
        "--maxClients",
        type=int,
        nargs="?",
        default=2,
        const=2,
        help="Maximum amount of clients (default 2).",
        dest="maxClients")
>>>>>>> 4af6b18bbed32e52f6aeb344a44f34f8eb18a651

    switches = argParser.parse_args()

    main(switches.maxConnections, switches.maxClients)
