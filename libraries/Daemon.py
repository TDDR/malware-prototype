
import os
import sys
import signal

from libraries.signalHandler import SignalHandler

def daemonize(pidfile, *, stdin = "/dev/null", stdout = "/dev/null", stderr = "/dev/null"):

    if os.path.exists(pidfile):
        raise  RuntimeError("Already  running")
    
    try:
        if os.fork()  > 0:
            raise  SystemExit(0)
    
    except OSError  as e:
        raise  RuntimeError("fork  #1 failed.")

    os.chdir("/") 
    os.umask(0) 
    os.setsid()

    try:
        if os.fork()  > 0:
            raise  SystemExit(0)

    except OSError  as e:
        raise  RuntimeError("fork  #2 failed.")

    sys.stdout.flush() 
    sys.stderr.flush()

    with open(stdin,  "rb", 0)  as f:
        os.dup2(f.fileno(),  sys.stdin.fileno())

    with open(stdout,  "ab",  0)  as f:
        os.dup2(f.fileno(),  sys.stdout.fileno())

    with open(stderr,  "ab",  0)  as f:
        os.dup2(f.fileno(),  sys.stderr.fileno())

    with open(pidfile,"w")  as f:
        print(os.getpid(),file=f)

    atexit.register(lambda:  os.remove(pidfile))

    signal.signal(signal.SIGTERM,  SignalHandler.gracefulExit)